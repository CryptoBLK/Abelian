// Copyright (c) 2014-2019, The Monero Project
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
//    of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.
// 
// 3. Neither the name of the copyright holder nor the names of its contributors may be
//    used to endorse or promote products derived from this software without specific
//    prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers

#pragma once

#include <stdexcept>
#include <string>
#include <boost/uuid/uuid.hpp>

#define CRYPTONOTE_DNS_TIMEOUT_MS                       20000

#define CRYPTONOTE_MAX_BLOCK_NUMBER                     500000000
#define CRYPTONOTE_GETBLOCKTEMPLATE_MAX_BLOCK_SIZE	196608 //size of block (bytes) that is the maximum that miners will produce
#define CRYPTONOTE_MAX_TX_SIZE                          1000000
#define CRYPTONOTE_MAX_TX_PER_BLOCK                     0x10000000
#define CRYPTONOTE_PUBLIC_ADDRESS_TEXTBLOB_VER          0
#define CRYPTONOTE_MINED_MONEY_UNLOCK_WINDOW            60
#define CURRENT_TRANSACTION_VERSION                     2
#define CURRENT_BLOCK_MAJOR_VERSION                     1
#define CURRENT_BLOCK_MINOR_VERSION                     0
#define CRYPTONOTE_BLOCK_FUTURE_TIME_LIMIT              60*60*2
#define CRYPTONOTE_DEFAULT_TX_SPENDABLE_AGE             10

#define BLOCKCHAIN_TIMESTAMP_CHECK_WINDOW               60

// MONEY_SUPPLY - total number coins to be generated
#define MONEY_SUPPLY                                    ((uint64_t)(-1))
#define EMISSION_SPEED_FACTOR_PER_MINUTE                (20)
#define FINAL_SUBSIDY_PER_MINUTE                        ((uint64_t)300000000000) // 3 * pow(10, 11)

#define CRYPTONOTE_REWARD_BLOCKS_WINDOW                 100
#define CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V2    60000 //size of block (bytes) after which reward for block calculated using block size
#define CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V1    20000 //size of block (bytes) after which reward for block calculated using block size - before first fork
#define CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V5    300000 //size of block (bytes) after which reward for block calculated using block size - second change, from v5
#define CRYPTONOTE_LONG_TERM_BLOCK_WEIGHT_WINDOW_SIZE   100000 // size in blocks of the long term block weight median window
#define CRYPTONOTE_SHORT_TERM_BLOCK_WEIGHT_SURGE_FACTOR 50
#define CRYPTONOTE_COINBASE_BLOB_RESERVED_SIZE          600
#define CRYPTONOTE_DISPLAY_DECIMAL_POINT                12
// COIN - number of smallest units in one coin
#define COIN                                            ((uint64_t)1000000000000) // pow(10, 12)

#define FEE_PER_KB_OLD                                  ((uint64_t)10000000000) // pow(10, 10)
#define FEE_PER_KB                                      ((uint64_t)2000000000) // 2 * pow(10, 9)
#define FEE_PER_BYTE                                    ((uint64_t)300000)
#define DYNAMIC_FEE_PER_KB_BASE_FEE                     ((uint64_t)2000000000) // 2 * pow(10,9)
#define DYNAMIC_FEE_PER_KB_BASE_BLOCK_REWARD            ((uint64_t)10000000000000) // 10 * pow(10,12)
#define DYNAMIC_FEE_PER_KB_BASE_FEE_V5                  ((uint64_t)2000000000 * (uint64_t)CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V2 / CRYPTONOTE_BLOCK_GRANTED_FULL_REWARD_ZONE_V5)
#define DYNAMIC_FEE_REFERENCE_TRANSACTION_WEIGHT         ((uint64_t)3000)

#define ORPHANED_BLOCKS_MAX_COUNT                       100


#define DIFFICULTY_TARGET_V2                            120  // seconds
#define DIFFICULTY_TARGET_V1                            60  // seconds - before first fork
#define DIFFICULTY_WINDOW                               720 // blocks
#define DIFFICULTY_LAG                                  15  // !!!
#define DIFFICULTY_CUT                                  60  // timestamps to cut after sorting
#define DIFFICULTY_BLOCKS_COUNT                         DIFFICULTY_WINDOW + DIFFICULTY_LAG


#define CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS_V1   DIFFICULTY_TARGET_V1 * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS
#define CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_SECONDS_V2   DIFFICULTY_TARGET_V2 * CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS
#define CRYPTONOTE_LOCKED_TX_ALLOWED_DELTA_BLOCKS       1


#define DIFFICULTY_BLOCKS_ESTIMATE_TIMESPAN             DIFFICULTY_TARGET_V1 //just alias; used by tests


#define BLOCKS_IDS_SYNCHRONIZING_DEFAULT_COUNT          10000  //by default, blocks ids count in synchronizing
#define BLOCKS_SYNCHRONIZING_DEFAULT_COUNT_PRE_V4       100    //by default, blocks count in blocks downloading
#define BLOCKS_SYNCHRONIZING_DEFAULT_COUNT              20     //by default, blocks count in blocks downloading

#define CRYPTONOTE_MEMPOOL_TX_LIVETIME                    (86400*3) //seconds, three days
#define CRYPTONOTE_MEMPOOL_TX_FROM_ALT_BLOCK_LIVETIME     604800 //seconds, one week

#define COMMAND_RPC_GET_BLOCKS_FAST_MAX_COUNT           1000

#define P2P_LOCAL_WHITE_PEERLIST_LIMIT                  1000
#define P2P_LOCAL_GRAY_PEERLIST_LIMIT                   5000

#define P2P_DEFAULT_CONNECTIONS_COUNT                   8
#define P2P_DEFAULT_HANDSHAKE_INTERVAL                  60           //secondes
#define P2P_DEFAULT_PACKET_MAX_SIZE                     50000000     //50000000 bytes maximum packet size
#define P2P_DEFAULT_PEERS_IN_HANDSHAKE                  250
#define P2P_DEFAULT_CONNECTION_TIMEOUT                  5000       //5 seconds
#define P2P_DEFAULT_SOCKS_CONNECT_TIMEOUT               45         // seconds
#define P2P_DEFAULT_PING_CONNECTION_TIMEOUT             2000       //2 seconds
#define P2P_DEFAULT_INVOKE_TIMEOUT                      60*2*1000  //2 minutes
#define P2P_DEFAULT_HANDSHAKE_INVOKE_TIMEOUT            5000       //5 seconds
#define P2P_DEFAULT_WHITELIST_CONNECTIONS_PERCENT       70
#define P2P_DEFAULT_ANCHOR_CONNECTIONS_COUNT            2
#define P2P_DEFAULT_SYNC_SEARCH_CONNECTIONS_COUNT       2
#define P2P_DEFAULT_LIMIT_RATE_UP                       2048       // kB/s
#define P2P_DEFAULT_LIMIT_RATE_DOWN                     8192       // kB/s

#define P2P_FAILED_ADDR_FORGET_SECONDS                  (60*60)     //1 hour
#define P2P_IP_BLOCKTIME                                (60*60*24)  //24 hour
#define P2P_IP_FAILS_BEFORE_BLOCK                       10
#define P2P_IDLE_CONNECTION_KILL_INTERVAL               (5*60) //5 minutes

#define P2P_SUPPORT_FLAG_FLUFFY_BLOCKS                  0x01
#define P2P_SUPPORT_FLAGS                               P2P_SUPPORT_FLAG_FLUFFY_BLOCKS

#define ALLOW_DEBUG_COMMANDS

#define CRYPTONOTE_NAME                         "bitmonero"
#define CRYPTONOTE_POOLDATA_FILENAME            "poolstate.bin"
#define CRYPTONOTE_BLOCKCHAINDATA_FILENAME      "data.mdb"
#define CRYPTONOTE_BLOCKCHAINDATA_LOCK_FILENAME "lock.mdb"
#define P2P_NET_DATA_FILENAME                   "p2pstate.bin"
#define MINER_CONFIG_FILE_NAME                  "miner_conf.json"

#define THREAD_STACK_SIZE                       5 * 1024 * 1024

#define HF_VERSION_DYNAMIC_FEE                  4
#define HF_VERSION_MIN_MIXIN_4                  6
#define HF_VERSION_MIN_MIXIN_6                  7
#define HF_VERSION_MIN_MIXIN_10                 8
#define HF_VERSION_ENFORCE_RCT                  6
#define HF_VERSION_PER_BYTE_FEE                 8
#define HF_VERSION_LONG_TERM_BLOCK_WEIGHT       10
#define HF_VERSION_SMALLER_BP                   10

#define PER_KB_FEE_QUANTIZATION_DECIMALS        8

#define HASH_OF_HASHES_STEP                     256

#define DEFAULT_TXPOOL_MAX_WEIGHT               648000000ull // 3 days at 300000, in bytes

#define BULLETPROOF_MAX_OUTPUTS                 16

#define CRYPTONOTE_PRUNING_STRIPE_SIZE          4096 // the smaller, the smoother the increase
#define CRYPTONOTE_PRUNING_LOG_STRIPES          3 // the higher, the more space saved
#define CRYPTONOTE_PRUNING_TIP_BLOCKS           5500 // the smaller, the more space saved
//#define CRYPTONOTE_PRUNING_DEBUG_SPOOF_SEED

// New constants are intended to go here
namespace config
{
  uint64_t const DEFAULT_FEE_ATOMIC_XMR_PER_KB = 500; // Just a placeholder!  Change me!
  uint8_t const FEE_CALCULATION_MAX_RETRIES = 10;
  uint64_t const DEFAULT_DUST_THRESHOLD = ((uint64_t)2000000000); // 2 * pow(10, 9)
  uint64_t const BASE_REWARD_CLAMP_THRESHOLD = ((uint64_t)100000000); // pow(10, 8)
  std::string const P2P_REMOTE_DEBUG_TRUSTED_PUB_KEY = "0000000000000000000000000000000000000000000000000000000000000000";

  uint64_t const CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 18;
  uint64_t const CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 19;
  uint64_t const CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 42;
  uint16_t const P2P_DEFAULT_PORT = 18080;
  uint16_t const RPC_DEFAULT_PORT = 18081;
  uint16_t const ZMQ_RPC_DEFAULT_PORT = 18082;
  boost::uuids::uuid const NETWORK_ID = { {
      0x12 ,0x30, 0xF1, 0x71 , 0x61, 0x04 , 0x41, 0x61, 0x17, 0x31, 0x00, 0x82, 0x16, 0xA1, 0xA1, 0x10
    } }; // Bender's nightmare
  std::string const GENESIS_TX = "";
  uint32_t const GENESIS_NONCE = 10000;

  namespace testnet
  {
    uint64_t const CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 53;
    uint64_t const CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 54;
    uint64_t const CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 63;
    uint16_t const P2P_DEFAULT_PORT = 28080;
    uint16_t const RPC_DEFAULT_PORT = 28081;
    uint16_t const ZMQ_RPC_DEFAULT_PORT = 28082;
    boost::uuids::uuid const NETWORK_ID = { {
        0x12 ,0x30, 0xF1, 0x71 , 0x61, 0x04 , 0x41, 0x61, 0x17, 0x31, 0x00, 0x82, 0x16, 0xA1, 0xA1, 0x11
      } }; // Bender's daydream
    std::string const GENESIS_TX = "013c01ff0006ff9fdb5802b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2b80a8d6b90702b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2b8088aca3cf0202b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2b8090cad2c60e02b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2b80e08d84ddcb0102b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2b80c0caf384a30202b48e39435ff5d9b6a0229a12b52fc4f46c873c0553f2e776b6f7b48a9613698f0bcaef6bbc3d664fd7b7c0eb2a4d0d5b6aa1bf1700eea84277949326c2c841f3958616025535ce29b06bffe0067355300b2c6daac29b350fa803a114ec9375d443a3a5a4337e40650b1c7f088c01dfa6590beaea7dd9b55ed45c124c6e0075d42abca41344e9f7d4d5dd07e7fac087d88b4bd20bbe83223dde3196690f0ff5e3c08c83943beac83c1f7369540b53862d29211b9b268fd4ac22fed8a4d2bb85020d596ad25e0d1619087d460dbfe5f23a5cbcbec984c7a345b298fdd263dbdcacf60f44ee4ef64a6c6634aae546b454ff26da20577511a66e7668fe80669694151a31acc1804c8ed25ae180bf13a31c81301d4089713d95600717b5975ef14a38c59f16da2ea6dfd79a2e1ac0df30bb36d72c3c9105bf940a195fba744a4f17f2b52c9db905ba7c9964d556972d413382bc64884a44575874fb20d9919578d5399f1aa04cf5a96f43b27478d9138a1c0bf56543cbd65c2ebe0066fc0cca7cafbbf7c61e07a1f2361e4ff945ffc6c7e27110939c1b2b46460a9d879110e6782d758ce755ffa724192e0ed74a065ae86625882d110c58585694b84a363daf72eae6c367542876405e6846367551b0e18ab3a668b05a1bbf882a4cd17c639cc29cab84b042db7fa233b03426facc4446cf98d0d24543917c61f96f192f4094cd72e800f1d02440668f30a3252642994fae71e6c364010f50cb664ea326d89bb6a36aa58fbbeb290ebfc75f789a678e20a46c17263c46e682be761e2fcc3fe685d13704f555fe930fc5deecbf02f6c9d4577ff8854697191839eb61cf4ad8fc41fd03dc5b4cbb676802717545669ec8f716421a1d97e909c30a968096f9370f75cae34a7ec540fcd6d8b9cb1d5f0e941914e12fe570e7a6d8668df6d91de4912f83debb86de53ad80c1d74e45f645d33757bbd95c2f78ccebfdce2e8d216b20cb8fd41ce7160d206f946eae19c775a9e830b0b51846b4e778e62bcb3aa95e55a018bba0e61a6e9147fd016c1837b8519770878c1a682073daf8b964f5076e40c29bfa569fc19890894e17eb813157151b9e9ff74458158842e1054753a63353d3a31abc5766f7df8debb4894efc4d588bb9573d868216a6b61e1cc9a6c86e994424bae4ea785b934df44017b421ae12be5edcfcc872065a70eebaf3c56f8c75d4cf4b0f3555666f511f8547db94cb3b88c36bdebce6799b3b8583e31c837400aa89fdbfc9bffb050f13509b4a6f90d8eb51842ca9c1bf031ae0430096c2f4691ccdb8a6c1e7aa524557af8df5bd1ded9ffa32e98e2b5057c05dc7d2be4a45c044f9dfe775a5891ad05196987eac6882122c75b660f59ccc66714c52d67b445de857dc18f9bc77a4167aa14fda1f860482ec53df5f309364e114a3c7e83e3c79f8a78b921aaeb0fa2d2ecc3b8158411790847fdf776c88fbff4b44df717563da235f75fbcdd2875aa18746c99fe5b79faa6f3c6706c48015486d61c75fb7b56938ebfbc0b07edd0a4d20fe55a94b0af268ef80d66190ccc698f50f060a0fef4db68998698faa2b7f73a61239a867d1d8acd0fda9a0d8ad84343ce0be2e77831f33b0293d38740bc3520618cef3e5e9c0adfa58a738d16c12f7797ab88bf1586697ca2ba10901e7a05f6f3eae60778b24da083cf4c885d1f9e1b530f02d32d7cf399a1416755c39dc917ccc14dc2b72afd8d0dfc6ad55398713cfc3895dd558065e67f0893c97231f7072d5cf5b1f02d77ef6edadc99e1bb7a8e5fb77e643ae3ee181dec44455a5bf165db328d846441372b5830e2b49e624066208e9fd2a41a36ad6458d3e7f6ed6fbb137855030dea9727316a31872c0fd1d6e4dbd15a2fb147284af5eb4ba641b963c79841d4a56f7764135623e515332f6efecd4a904420f569ae710e8531c434f33d762fee8aa1751d6ba63c775e48654926ea52cb3b51029a38c1d3ea5f51e95beda01ba3df8cd374d1817dddd80114526458d630cba4020448ef0d645c2e71a9d7f3a3c908f61bc38654c281df8e5468dbbc49b1c8d8a69a413d34db0012e1a61c2e27f632bfbb7182f0f6d5fa883007c474dc101cc52193e6188ab71727414befc9faadcbf4a7ac77373a8d69b85773c8c5e79a6b02e38cb6a3768e457cb0a4cb4eb599f0b6ca5bcfe0993857335ffcba5299d8a10cb250a2eda68382df7a5da9e2154b1b5170cbfe46f2c71b0ad16bf786193a8ec590447ba4422fdde9c9b532bc5cb724b68a3669e50fa5a1c7164e9c7d6b127fe0980fd6a5a088b56a6e65443ea432d3eec575fbf6a75116beab9fb7634cb96754b4838664090ad7135567052a44b21600d442da3f4a123ac335690ce785223e86f00871b3cae0cfb8b0f5baa7d0c82a1c6284e04caf4447f18ffb95e8512e0483924122d012c2cbaf5b4694a9d06dacf8d498a2d2a79fd1d2ddf0d5e336ed8e080fc7af4570b507c84e598ca5a893f626bccd38ef42d8c4f89bdeda39e89097f673aa3a1fed034dbc83bc5bfb6d3faca07c6506d726d5c64e7bca4cbb73adfc11a99e8fff577c736760a6f5286d78966aa2be7c6ee243744060237a1d7d883ad59064e2c8c798a1e04175626b9b7c92216812dafe946c56e76921d39134b2d197df94bcf13e29b5b00a33abe1920ee77aa998ab41be784b733ed32b36353ce09a98a5e6699231fb1735f870f5ef4025f5548c95d5ca2380e61b7f30c323aeea0cf8225e2c889672f21287d894e914fd95d8a1f8c3f2768fbf1665fd081ec5ab7e87db89b52da31f032d762c4321d792530bbdbc91a9ddd096973cb5b34b670d6e99f9ac0c16da58199ed91cabb6f16da2b5745834ce910ccb8ddaa25d6c75959cdb02d3748578e223372d33ae4451f9206d3983a11a7935002e72087deeb6285d58c8c5573c039754d826831c880be7f0ac42c830536b2b6649e23ef83953fa574bdd922bbb92c98efcaedb38857cb9802f0fb73d469bef6818ded3d0fd63c5f927a44184387cebd6247d8e47bbfae556f60059fd180e0bb76d738e02947e5df2afd51cad42d10aa74db1165685b1b94684e0e7323bac1df90e1f15a64b5b615c4eaa0a4e69ed39bd43f90bc4aae8ce46a083750cfd356cc780e2db23cb343b577704b02908b2b6986c4dbeb8842da4573b31b8bda6b388557950973b0ad2964de612f36f8ae2d28d990194c4fd09fe5de3820f229d349b491b5893c738e8627e635bd9025ae0ef554b05395e048bdecd78b66d1f01bd9b38f4fc766298609ed91e1d381ce6eacabb532a0bb95bf869faf274cd829862284c5a8122cfee3a079b2b87d8a02b445";
    uint32_t const GENESIS_NONCE = 10001;
  }

  namespace stagenet
  {
    uint64_t const CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 24;
    uint64_t const CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 25;
    uint64_t const CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 36;
    uint16_t const P2P_DEFAULT_PORT = 38080;
    uint16_t const RPC_DEFAULT_PORT = 38081;
    uint16_t const ZMQ_RPC_DEFAULT_PORT = 38082;
    boost::uuids::uuid const NETWORK_ID = { {
        0x12 ,0x30, 0xF1, 0x71 , 0x61, 0x04 , 0x41, 0x61, 0x17, 0x31, 0x00, 0x82, 0x16, 0xA1, 0xA1, 0x12
      } }; // Bender's daydream
    std::string const GENESIS_TX = "";
    uint32_t const GENESIS_NONCE = 10002;
  }
}

namespace cryptonote
{
  enum network_type : uint8_t
  {
    MAINNET = 0,
    TESTNET,
    STAGENET,
    FAKECHAIN,
    UNDEFINED = 255
  };
  struct config_t
  {
    uint64_t const CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX;
    uint64_t const CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX;
    uint64_t const CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX;
    uint16_t const P2P_DEFAULT_PORT;
    uint16_t const RPC_DEFAULT_PORT;
    uint16_t const ZMQ_RPC_DEFAULT_PORT;
    boost::uuids::uuid const NETWORK_ID;
    std::string const GENESIS_TX;
    uint32_t const GENESIS_NONCE;
  };
  inline const config_t& get_config(network_type nettype)
  {
    static const config_t mainnet = {
      ::config::CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX,
      ::config::CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX,
      ::config::CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX,
      ::config::P2P_DEFAULT_PORT,
      ::config::RPC_DEFAULT_PORT,
      ::config::ZMQ_RPC_DEFAULT_PORT,
      ::config::NETWORK_ID,
      ::config::GENESIS_TX,
      ::config::GENESIS_NONCE
    };
    static const config_t testnet = {
      ::config::testnet::CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX,
      ::config::testnet::CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX,
      ::config::testnet::CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX,
      ::config::testnet::P2P_DEFAULT_PORT,
      ::config::testnet::RPC_DEFAULT_PORT,
      ::config::testnet::ZMQ_RPC_DEFAULT_PORT,
      ::config::testnet::NETWORK_ID,
      ::config::testnet::GENESIS_TX,
      ::config::testnet::GENESIS_NONCE
    };
    static const config_t stagenet = {
      ::config::stagenet::CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX,
      ::config::stagenet::CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX,
      ::config::stagenet::CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX,
      ::config::stagenet::P2P_DEFAULT_PORT,
      ::config::stagenet::RPC_DEFAULT_PORT,
      ::config::stagenet::ZMQ_RPC_DEFAULT_PORT,
      ::config::stagenet::NETWORK_ID,
      ::config::stagenet::GENESIS_TX,
      ::config::stagenet::GENESIS_NONCE
    };
    switch (nettype)
    {
      case MAINNET: return mainnet;
      case TESTNET: return testnet;
      case STAGENET: return stagenet;
      case FAKECHAIN: return mainnet;
      default: throw std::runtime_error("Invalid network type");
    }
  };
}
