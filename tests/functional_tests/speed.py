#!/usr/bin/env python3

# Copyright (c) 2018 The Monero Project
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other
#    materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors may be
#    used to endorse or promote products derived from this software without specific
#    prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
# THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Test speed of various procedures

Test the following RPCs:
    - generateblocks
    - transfer
    - [TODO: many tests still need to be written]

"""


import time
from time import sleep
from __future__ import print_function

from framework.daemon import Daemon
from framework.wallet import Wallet


class SpeedTest():
    def set_test_params(self):
        self.num_nodes = 1

    def run_test(self):
        daemon = Daemon()
        wallet = Wallet()

        destinations = wallet.make_uniform_destinations('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',1,3)

        self._test_speed_generateblocks(daemon=daemon, blocks=70)
        for i in range(1, 10):
            while wallet.get_balance().unlocked_balance == 0:
                print('Waiting for wallet to refresh...')
                sleep(1)
            self._test_speed_transfer_split(wallet=wallet)
        self._test_speed_generateblocks(daemon=daemon, blocks=10)

    def _test_speed_generateblocks(self, daemon, blocks):
        print('Test speed of block generation')
        start = time.time()

        res = daemon.generateblocks('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', blocks)
        # wallet seed: estate dwindling shackles obnoxious nightly skydive rejoices pivot
        # cobra down girth moisture adept dedicated toffee awesome
        # omission stellar whale fading around nugget odometer petals nugget

        print('generating ', blocks, 'blocks took: ', time.time() - start, 'seconds')

    def _test_speed_transfer_split(self, wallet):
        print('Test speed of transfer')
        start = time.time()

        destinations = wallet.make_uniform_destinations('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',1)
        res = wallet.transfer_split(destinations)

        print('generating tx took: ', time.time() - start, 'seconds')


if __name__ == '__main__':
    SpeedTest().run_test()
