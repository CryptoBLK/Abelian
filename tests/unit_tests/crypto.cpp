// Copyright (c) 2017-2018, The Monero Project
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
//    of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be
//    used to endorse or promote products derived from this software without specific
//    prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <cstdint>
#include <gtest/gtest.h>
#include <memory>
#include <sstream>
#include <string>

#include "cryptonote_basic/cryptonote_basic_impl.h"

namespace
{
  static constexpr const std::uint8_t source[] = {
      0x79, 0x2a, 0x4f, 0xf1, 0xe2, 0x62, 0x21, 0x5b, 0x77, 0x3b, 0x86, 0x6f, 0x61, 0xaa, 0x27, 0x0b, 0xbd, 0x5e, 0x9d, 0x29, 0xe6, 0x04, 0x18, 0xd3, 0x0d, 0xe2, 0x42, 0x2c, 0xe6, 0xef, 0x5a, 0x62, 0xd0, 0xe5, 0x94, 0x7b, 0xde,0xba, 0xaf, 0xdd, 0xd6,
      0xf8, 0x7a, 0xce, 0xd5, 0x6a, 0xea, 0x66, 0x1e, 0x2c, 0x2a, 0xeb, 0x8a, 0xd4, 0x9b, 0x99, 0x7e, 0x06, 0x4b, 0x06, 0x74, 0x01, 0x7e, 0xee, 0x8d, 0xfd, 0x42, 0x84, 0xcc, 0x4d, 0xdb, 0xa1, 0xf6, 0xe5, 0xda, 0xd2, 0x85, 0x43,0xa8, 0x71, 0x30, 0x66,
      0x90, 0xfd, 0x1a, 0xbd, 0xc9, 0x30, 0xe9, 0xdc, 0x0c, 0x42, 0xba, 0x8b, 0xbe, 0x23, 0x09, 0x79, 0xc2, 0x09, 0x1f, 0xbd, 0xa9, 0xa0, 0xac, 0xcd, 0x03, 0x46, 0x8c, 0x5d, 0x3b, 0xc2, 0x6b, 0x7d, 0x80, 0x0a, 0x85, 0x29, 0x24,0x0c, 0x03, 0xc9, 0x26,
      0xb9, 0x26, 0xce, 0x24, 0x42, 0x3a, 0x59, 0xda, 0x00, 0x1b, 0x30, 0xc2, 0xab, 0x94, 0xe0, 0x03, 0xab, 0xcd, 0x35, 0x95, 0x63, 0xb2, 0xb2, 0xc4, 0xad, 0x8c, 0x19, 0xbc, 0xa5, 0x7a, 0x8b, 0xbe, 0x2b, 0x86, 0x56, 0xa5, 0x9d,0x2d, 0xc5, 0x9e, 0x70,
      0xa8, 0x19, 0x4e, 0x83, 0x46, 0xb8, 0xd0, 0x7a, 0xcd, 0x88, 0xce, 0x48, 0x7b, 0xe9, 0x45, 0xd3, 0x87, 0xd8, 0x3d, 0x93, 0x6a, 0x36, 0x74, 0xbb, 0x7d, 0x86, 0xb8, 0xdd, 0x42, 0xd1, 0xc8, 0xb3, 0xb9, 0x67, 0xbc, 0x98, 0x4a,0xb6, 0x24, 0x59, 0x84,
      0x30, 0x06, 0xa0, 0x74, 0xbb, 0x40, 0x33, 0x41, 0x41, 0x63, 0x81, 0xc1, 0x20, 0xb6, 0xcc, 0x02, 0x8d, 0x64, 0xa6, 0xc5, 0x4d, 0x75, 0x4c, 0xbd, 0xc0, 0xb5, 0xdc, 0xea, 0x38, 0x9a, 0xa1, 0x43, 0xc3, 0x21, 0xc8, 0x78, 0x97,0xd5, 0x8e, 0xc2, 0xeb,
      0xdb, 0x02, 0xa1, 0x6e, 0xc4, 0xd3, 0x80, 0x57, 0x0b, 0xca, 0xd8, 0x17, 0xb7, 0x43, 0x63, 0xdc, 0x19, 0x2a, 0xc6, 0x6e, 0x7b, 0x09, 0x37, 0xca, 0xa3, 0xa4, 0xa1, 0xac, 0xb9, 0x3d, 0xd8, 0x71, 0xd7, 0x2c, 0x00, 0xb1, 0x89,0x58, 0xc7, 0xa5, 0xc2,
      0x1d, 0x2a, 0x56, 0x96, 0x92, 0xe8, 0xd2, 0xce, 0x82, 0x0a, 0x10, 0x92, 0x75, 0x9c, 0x9b, 0xa6, 0x27, 0x2a, 0x9e, 0x3c, 0x56, 0xc0, 0x5a, 0x5a, 0xeb, 0xe7, 0x7a, 0x54, 0x9e, 0xe6, 0xcc, 0x62, 0xe3, 0x94, 0x46, 0xc7, 0xe8,0xb2, 0xca, 0xe8, 0x41,
      0x33, 0x52, 0x1c, 0xe3, 0x96, 0xd2, 0x2e, 0x88, 0x26, 0xaa, 0x88, 0xeb, 0x08, 0x26, 0xdc, 0x2a, 0x01, 0xab, 0x00, 0x2a, 0xda, 0x81, 0x44, 0x8e, 0xec, 0x69, 0x24, 0xda, 0x8a, 0xc7, 0x4b, 0x49, 0x6d, 0xd8, 0x87, 0x45, 0x81,0xa4, 0xb8, 0xd9, 0x04,
      0xc2, 0xdb, 0x36, 0x5e, 0x8b, 0xd8, 0x29, 0x8d, 0xe9, 0x1a, 0x9b, 0x13, 0x54, 0x17, 0x88, 0x89, 0x2a, 0x10, 0x79, 0xe3, 0x59, 0x2c, 0x30, 0xaa, 0x0a, 0x6a, 0x58, 0xe0, 0xbd, 0xe7, 0x5c, 0xa5, 0x7b, 0x44, 0x2d, 0x59, 0xbc,0x92, 0xb3, 0x35, 0x97,
      0x16, 0x53, 0xe4, 0x69, 0xda, 0x80, 0xda, 0x9a, 0x0b, 0x61, 0xe0, 0x3c, 0x92, 0xb2, 0x69, 0xd2, 0x07, 0x53, 0x05, 0x9d, 0x54, 0x98, 0x4a, 0x38, 0x6c, 0xb5, 0xe0, 0x8a, 0xea, 0x6b, 0xb9, 0x83, 0x74, 0x18, 0x6c, 0x7b, 0x3c,0xb7, 0x2d, 0x6c, 0xb0,
      0x2e, 0x61, 0xb3, 0x6b, 0x31, 0x75, 0x07, 0x24, 0x0b, 0x7d, 0x61, 0x8e, 0x28, 0x9e, 0x5a, 0xe4, 0xe8, 0x31, 0xc7, 0x1e, 0x9d, 0xd7, 0x16, 0x69, 0xc7, 0xeb, 0xac, 0x81, 0x48, 0xe8, 0x04, 0x7a, 0x90, 0xb0, 0x35, 0x86, 0x08,0x69, 0x05, 0x66, 0x60,
      0x4c, 0xb9, 0x4d, 0xe1, 0x0a, 0x77, 0xc2, 0x2a, 0x69, 0x58, 0x69, 0x3b, 0xde, 0x76, 0x50, 0xba, 0xad, 0x48, 0x11, 0xb0, 0x4e, 0x76, 0x72, 0xbe, 0x10, 0x1b, 0xb5, 0x8b, 0xd9, 0x91, 0xb9, 0x7e, 0x71, 0x27, 0x52, 0x0d, 0x9d,0x11, 0x1b, 0x70, 0x8b,
      0x0b, 0xbb, 0x13, 0xc8, 0x88, 0x39, 0xe6, 0x06, 0x6d, 0x85, 0xb5, 0xbb, 0xd8, 0xa2, 0x48, 0x49, 0x3b, 0xde, 0x3c, 0xa1, 0x22, 0x62, 0xe9, 0xd0, 0xed, 0xa4, 0xc5, 0x42, 0x16, 0x5e, 0x18, 0x84, 0x04, 0x57, 0x00, 0xe7, 0xd3,0xb2, 0x3c, 0x25, 0xc7,
      0xbe, 0x25, 0x04, 0x9d, 0xe1, 0xbd, 0x25, 0x44, 0x2a, 0x16, 0x91, 0xd5, 0xc9, 0xb8, 0xc0, 0x92, 0x12, 0x4b, 0xe1, 0xc8, 0xc0, 0x4e, 0x62, 0x27, 0xc8, 0x1e, 0xa9, 0x40, 0xdc, 0xb7, 0xde, 0x33, 0xd0, 0xab, 0x8b, 0x8e, 0x47,0xb7, 0xa2, 0xb7, 0x2c,
      0x0d, 0x02, 0x46, 0x18, 0x0e, 0x84, 0x08, 0x66, 0x16, 0x4a, 0x95, 0x94, 0x44, 0x9b, 0xe8, 0x8e, 0xb7, 0x37, 0x63, 0x31, 0x15, 0x2d, 0x44, 0x96, 0x30, 0x83, 0xa7, 0x92, 0xe8, 0x38, 0x30, 0xe9, 0x45, 0x51, 0xe0, 0xbd, 0xd1,0xba, 0xca, 0x73, 0xc2,
      0xd5, 0xa8, 0x72, 0x2e, 0x86, 0x03, 0x30, 0x02, 0x12, 0x34, 0x09, 0xd7, 0xd7, 0xec, 0x84, 0x60, 0x42, 0xe7, 0x6c, 0xa4, 0x38, 0x32, 0x4e, 0xd1, 0xa5, 0x1e, 0xcd, 0xab, 0xd5, 0x31, 0x60, 0x05, 0x32, 0x69, 0x70, 0x68, 0x3e,0x1b, 0x28, 0x93, 0xc3,
      0xd0, 0x5b, 0x23, 0x70, 0x9d, 0x27, 0x06, 0x89, 0xd6, 0x17, 0xb4, 0x60, 0x5d, 0xad, 0xeb, 0x6a, 0x5d, 0xd5, 0xbb, 0xb6, 0x99, 0xa0, 0xd6, 0x0a, 0xe0, 0xe1, 0x9e, 0x0d, 0xbe, 0x38, 0x5a, 0x25, 0x7c, 0x04, 0x33, 0x4e, 0xc0,0x78, 0xa0, 0xe8, 0xad,
      0x50, 0x38, 0x2b, 0xd8, 0x5e, 0x3c, 0xee, 0x1a, 0x0c, 0xa7, 0xd4, 0x69, 0xcc, 0xe2, 0x84, 0x82, 0x4c, 0xc9, 0xd7, 0x65, 0x1f, 0xa5, 0x3e, 0x69, 0x1c, 0xf9, 0x97, 0x94, 0x58, 0xb4, 0xd9, 0xd5, 0x4a, 0x56, 0xb5, 0xfb, 0xc0,0x06, 0xf1, 0x9d, 0x83,
      0xa3, 0xb6, 0x12, 0xe4, 0x9b, 0x5e, 0x7e, 0x88, 0x91, 0x2c, 0x5b, 0xdd, 0x7e, 0xd0, 0xdc, 0xec, 0xf7, 0x7e, 0x48, 0xff, 0x5c, 0xbf, 0xa5, 0x4e, 0xd5, 0x35, 0x5e, 0x54, 0xaa, 0xcd, 0x91, 0x49, 0x31, 0x63, 0x68, 0xc3, 0x52,0x38, 0xc5, 0xd8, 0x7a,
      0x81, 0x8d, 0xa2, 0xba, 0xe8, 0x3b, 0x27, 0xc2, 0xe9, 0x3a, 0x75, 0xf4, 0x36, 0x24, 0xd6, 0x9f, 0x23, 0x09, 0x38, 0xae, 0x07, 0x23, 0xcc, 0x4e, 0xa3, 0x78, 0xca, 0x1d, 0x19, 0x12, 0xcc, 0xa4, 0xc9, 0x14, 0x0c, 0x48, 0xa2,0x00, 0xdf, 0x37, 0xac,
      0xef, 0x6a, 0x71, 0x63, 0xc2, 0x3c, 0xd2, 0x13, 0x33, 0x5a, 0xea, 0x68, 0x50, 0xba, 0x79, 0x0c, 0xd3, 0xe3, 0x03, 0x4b, 0x56, 0x06, 0xc9, 0x60, 0xf9, 0x5a, 0xa3, 0x44, 0x5b, 0xe0, 0x0e, 0xe3, 0x55, 0xe0, 0x21, 0xdf, 0xe1,0x51, 0x28, 0xe7, 0xf3,
      0xbc, 0xbd, 0x6a, 0xe7, 0x28, 0xa6, 0xd2, 0xfc, 0xab, 0x57, 0x72, 0xf6, 0x25, 0x3d, 0xe1, 0x0c, 0xbc, 0x0b, 0x8c, 0x45, 0x46, 0xf2, 0x51, 0x1a, 0x26, 0x18, 0xbb, 0xdc, 0x93, 0x66, 0x33, 0x40, 0xa5, 0x87, 0x19, 0x7a, 0x39,0x36, 0xda, 0x9b, 0x5a,
      0xf4, 0x66, 0xff, 0x87, 0xa6, 0x5d, 0x74, 0xbd, 0xd4, 0x24, 0x00, 0x23, 0x8c, 0xfe, 0x94, 0x6b, 0x1e, 0x14, 0xb8, 0x94, 0x2f, 0x23, 0x12, 0x06, 0xdc, 0xac, 0xd1, 0xaa, 0x2b, 0xb7, 0x21, 0xbe, 0x62, 0xdc, 0x13, 0x25, 0xfb,0xb7, 0xfc, 0xb5, 0x44,
      0xb8, 0xe9, 0x42, 0xd7, 0xf8, 0x65, 0x49, 0x5b, 0x6f, 0x34, 0xfb, 0x11, 0x1b, 0x6f, 0x1b, 0x0b, 0x9a, 0x41, 0x36, 0x6e, 0x3f, 0xc4, 0xf5, 0x37, 0x84, 0x32, 0xfb, 0x0c, 0xf4, 0x5f, 0xbe, 0x5b, 0x77, 0xe9, 0x88, 0xd6, 0x3c,0xa8, 0xee, 0x1e, 0xd6,
      0x64, 0x00, 0x58, 0x51, 0x50, 0x35, 0xd6, 0xe9, 0xa7, 0x47, 0x6d, 0xae, 0x79, 0x35, 0x87, 0xfa, 0xac, 0x24, 0xa0, 0xbf, 0x75, 0x71, 0x6f, 0x6d, 0xd8, 0x04, 0x27, 0xfd, 0xef, 0xf2, 0x8d, 0x86, 0x4b, 0x1d, 0xd5, 0x1f, 0x52,0x42, 0xbb, 0x03, 0x38,
      0x24, 0x9b, 0xd4, 0x27, 0xca, 0xe3, 0x43, 0x95, 0x23, 0xb1, 0x1c, 0xbe, 0xa9, 0xac, 0x2d, 0xfc, 0xff, 0xd8, 0xec, 0xde, 0xb3, 0x2a, 0xab, 0xbb, 0x70, 0xd8, 0x70, 0xdc, 0x1b, 0x13, 0xa0, 0x25, 0x85, 0xa4, 0xdd, 0x2d, 0xb4,0x1f, 0xe5, 0x59, 0xa0,
      0xdd, 0x8c, 0xae, 0x27, 0x20, 0x21, 0xda, 0x4b, 0x8c, 0x1f, 0x8b, 0x16, 0x7a, 0x0d, 0xe1, 0x8d, 0xe3, 0x29, 0xc2, 0xfc, 0x5d, 0x51, 0x18, 0xe4, 0x73, 0xc5, 0xf0, 0x3c, 0x15, 0x99, 0xc9, 0x95, 0x9e, 0x5b, 0x83, 0x58, 0xb5,0x75, 0xd2, 0x98, 0x1b,
      0xca, 0x08, 0xf6, 0x1a, 0x3c, 0x46, 0x85, 0xdc, 0xe6, 0x77, 0x73, 0x44, 0x08, 0x5a, 0x28, 0x87, 0xe8, 0x5c, 0x7b, 0x40, 0x4e, 0x98, 0x0a, 0x16, 0x97, 0x1e, 0x51, 0xf2, 0x04, 0x93, 0xfa, 0xa8, 0x51, 0xa4, 0x66, 0x11, 0x5c,0x7f, 0xeb, 0xaf, 0xe5,
      0x03, 0x70, 0x3e, 0x58, 0x1a, 0x1c, 0xa1, 0x42, 0x89, 0xd2, 0xfd, 0x44, 0x99, 0x76, 0x11, 0x3d, 0x30, 0xb5, 0x0b, 0x7c, 0x64, 0x76, 0xa6, 0x5f, 0x5e, 0xb4, 0x8c, 0x25, 0xe9, 0x39, 0x7b, 0x70, 0x81, 0x80, 0x02, 0xc3, 0x59,0x6b, 0xa4, 0x17, 0xe9,
      0xa3, 0x29, 0x70, 0x33, 0xa2, 0xfd, 0x55, 0xc0, 0x5b, 0x07, 0xfe, 0x08, 0xf5, 0xaa, 0x87, 0x8c, 0x35, 0x84, 0xe9, 0x4d, 0x7b, 0xaa, 0x54, 0xb0, 0x09, 0x16, 0xf7, 0xc5, 0xaf, 0xd5, 0x03, 0x4d, 0x89, 0xe7, 0x45, 0x09, 0xd1,0x1c, 0xc6, 0x42, 0xb8,
      0xce, 0xd1, 0x56, 0xe5, 0xec, 0xa8, 0xfb, 0xe0, 0x50, 0xef, 0x0a, 0xc0, 0x45, 0xd7, 0xc2, 0x5f, 0x32, 0xf5, 0xda, 0x52, 0x4c, 0x84, 0x82, 0x54, 0x90, 0x6f, 0xd1, 0x9f, 0xc6, 0x5d, 0x93, 0x81, 0x60, 0x87, 0x95, 0x7e, 0x35,0x2e, 0xe5, 0x82, 0x08,
      0x98, 0xb6, 0x99, 0x73, 0xc9, 0x5f, 0x4c, 0x1a, 0xbe, 0x4f, 0x2e, 0xf2, 0xa7, 0x0a, 0xbf, 0xdb, 0x15, 0x08, 0xf4, 0x50, 0x9b, 0x2b, 0x98, 0x6f, 0xbf, 0x91, 0x07, 0xdb, 0xf4, 0x0c, 0x8b, 0x6d, 0x95, 0xa4, 0x22, 0xa9, 0x5d,0xf0, 0x1b, 0x12, 0x12,
      0xaf, 0x4c, 0x73, 0xee, 0x2d, 0x01, 0x64, 0xb4, 0x87, 0x35, 0xf8, 0x1d, 0xb3, 0xad, 0x73, 0x93, 0xcf, 0x96, 0x75, 0x13, 0x46, 0x24, 0x7b, 0x75, 0xa1, 0x3f, 0x49, 0x12, 0x54, 0x41, 0x38, 0xa3, 0xa5, 0x95, 0xc0, 0xcb, 0x4a,0xbf, 0x9c, 0x4b, 0x55,
      0x2a, 0xd3, 0x4c, 0x4e, 0x99, 0x0b, 0xe3, 0x11, 0xcc, 0x09, 0x3c, 0x7d, 0x94, 0xea, 0xc5, 0x92, 0xff, 0x57, 0xb5, 0x98, 0x0e, 0x89, 0xa4, 0x42, 0x8e, 0x83, 0x7e, 0xb8, 0x87, 0x44, 0x2c, 0x64, 0xbe, 0x78, 0x3f, 0x40, 0xec,0x39, 0xe8, 0x46, 0x46,
      0xac, 0xc6, 0x6d, 0x82, 0x49, 0xe3, 0x2a, 0x2b, 0x59, 0x62, 0x45, 0x80, 0x63, 0xd0, 0xef, 0xef, 0x9e, 0x11, 0xd8, 0x99, 0xe4, 0x5e, 0xac, 0x86, 0x91, 0x91, 0xa7, 0xf6, 0x9b, 0x72, 0xa0, 0xf2, 0xdd, 0xf4, 0x5b, 0x7e, 0xfe,0xea, 0xa4, 0x77, 0xe8,
      0x51, 0x62, 0x05, 0x68, 0x10, 0x90, 0x25, 0x40, 0xb3, 0xb8, 0xc3, 0xe4, 0xc1, 0x04, 0xbd, 0x08, 0x67, 0xc3, 0x8d, 0x24, 0xe7, 0x5a, 0xf1, 0x39, 0xc4, 0x0c, 0x87, 0x0a, 0xc2, 0x9d, 0x5e, 0xf9, 0xfe, 0x49, 0xbe, 0x74, 0x7e,0xc4, 0xe4, 0x07, 0x38,
      0xe8, 0x6b, 0x3f, 0x6f, 0x99, 0x5d, 0xea, 0x5f, 0xe5, 0x1d, 0x45, 0xd0, 0xda, 0x4a, 0x87, 0xdf, 0x6e, 0x95, 0x77, 0xb6, 0x6d, 0x48, 0x04, 0xa7, 0xd4, 0x8e, 0xaf, 0x94, 0xbf, 0xaa, 0xbf, 0x4e, 0xdf, 0x30, 0x3d, 0xec, 0x7f,0x59, 0x27, 0xb2, 0x06,
      0x90, 0x36, 0x63, 0x82, 0x56, 0x05, 0xb1, 0x73, 0x7c, 0x5f, 0x0a, 0x95, 0x0e, 0x6b, 0xa0, 0xde, 0x81, 0xa1, 0xed, 0x9e, 0xc8, 0x17, 0x05, 0x90, 0xb8, 0xb2, 0x6c, 0x81, 0x22, 0x1c, 0x8b, 0x1a, 0xde, 0xdb, 0xc9, 0x1e, 0x77,0xfc, 0xa5, 0xa0, 0x4b,
      0x49, 0xfc, 0xc4, 0x96, 0xc9, 0x50, 0x71, 0x32, 0x5e, 0x2b, 0xf9, 0x1a, 0x10, 0x49, 0x64, 0x3e, 0x58, 0x77, 0x9f, 0x72, 0x6d, 0xd6, 0xf2, 0x3f, 0x5e, 0x74, 0x21, 0xd0, 0x43, 0x47, 0x1b, 0x7d, 0xee, 0x9f, 0xa0, 0x85, 0x02,0x75, 0x8e, 0xfe, 0x1e,
      0x91, 0x79, 0x24, 0x1b, 0xa4, 0x81, 0xd9, 0xc2, 0x5a, 0x61, 0x93, 0x51, 0x3f, 0xc0, 0x2d, 0x5c, 0x2d, 0xfe, 0x12, 0x6c, 0x8b, 0xfd, 0x51, 0x1c, 0x85, 0x86, 0x6c, 0x7e, 0x22, 0xc1, 0xc2, 0x25, 0x47, 0x4b, 0xb4, 0x47, 0x72,0xd0, 0xd2, 0xdf, 0xe5,
      0x29, 0xda, 0x08, 0x69, 0x78, 0xd2, 0xbb, 0x2a, 0x97, 0x59, 0x7c, 0x1f, 0x78, 0x75, 0x21, 0xa2, 0x2d, 0x89, 0x89, 0x2a, 0x45, 0x32, 0x77, 0xd0, 0x92, 0xe3, 0x58, 0x19, 0xaa, 0x68, 0xce, 0x30, 0xaf, 0x71, 0xa2, 0x7b, 0x78,0x01, 0xc6, 0x5d, 0x00,
      0x5f, 0x25, 0x72, 0xc2, 0x08, 0x25, 0x6c, 0x8a, 0x70, 0x54, 0xf8, 0xbb, 0xf7, 0xdf, 0x5b, 0xb3, 0x76, 0x70, 0x58, 0x44, 0x41, 0x28, 0x4a, 0x39, 0x50, 0x38, 0x77, 0x1b, 0x9f, 0xc8, 0xd7, 0xbf, 0x86, 0x02, 0x2e, 0x24, 0x02,0x1e, 0xa8, 0xc6, 0xd0,
      0x25, 0x62, 0x52, 0x2d, 0x71, 0xff, 0x8b, 0xd3, 0x30, 0xd2, 0xbd, 0x5b, 0xe7, 0x10, 0x13, 0x18, 0xcd, 0x1b, 0xb6, 0x65, 0xd8, 0x38, 0x7f, 0xbf, 0x53, 0x23, 0x9f, 0x3b, 0x98, 0x32, 0xc2, 0x0a, 0xe8, 0x65, 0xed, 0x0d, 0x21,0x3b, 0xa0, 0x93, 0x79,
      0x62, 0x7a, 0xab, 0xa6, 0x06, 0x63, 0x2c, 0x48, 0x8c, 0xcb, 0xa7, 0xe7, 0x66, 0xeb, 0x04, 0x0b, 0xbb, 0x26, 0x97, 0xd9, 0x1b, 0x6e, 0x32, 0xb2, 0x3c, 0x1c, 0x7f, 0x3a, 0x39, 0x6d, 0xab, 0xe4, 0xb2, 0xae, 0x2e, 0x8b, 0x91,0x6c, 0xa5, 0xbc, 0x51,
      0xc6, 0xda, 0x01, 0x31, 0x1a, 0x98, 0x3f, 0xc5, 0x71, 0x0a, 0x58, 0xde, 0x07, 0x91, 0xb3, 0xb3, 0x04, 0xd9, 0x0c, 0x80, 0xcd, 0x4a, 0xaf, 0xd5, 0xf0, 0xb4, 0x52, 0xe7, 0xc9, 0x14, 0xc2, 0x13, 0xa0, 0x93, 0x64, 0x65, 0x1a,0x1e, 0xde, 0xef, 0xdd,
      0x5d, 0x77, 0x93, 0xbf, 0x55, 0x5c, 0xea, 0xf3, 0x64, 0xf0, 0x9b, 0x88, 0x1f, 0x0a, 0x5c, 0x8b, 0xad, 0x89, 0x18, 0x41, 0x92, 0xfd, 0x7a, 0x69, 0x05, 0x23, 0x15, 0xf9, 0x49, 0xbf, 0x4d, 0xb9, 0x32, 0x39, 0x43, 0x12, 0x2f,0x70, 0xd4, 0xd7, 0x16,
      0xd0, 0x06, 0x91, 0xd5, 0x9b, 0x40, 0xfe, 0x45, 0x76, 0xc9, 0xf9, 0xc3, 0x20, 0x44, 0x34, 0x34, 0x4c, 0x2f, 0xe2, 0x0e, 0x90, 0xa0, 0x92, 0x99, 0x0b, 0x1b, 0xa8, 0xc6, 0xb0, 0x6b, 0x3d, 0x11, 0xd2, 0x4e, 0x82, 0x8f, 0xe2,0xe8, 0xb8, 0xed, 0xf3,
      0xae, 0x16, 0x7e, 0xee, 0x21, 0xfc, 0xdf, 0xab, 0x60, 0x5e, 0x5b, 0xc6, 0xde, 0x67, 0xa3, 0x1b, 0x39, 0x92, 0xad, 0x9a, 0xca, 0xac, 0xdd, 0xcf, 0x89, 0x7b, 0xfa, 0x0b, 0xf5, 0x3c, 0x19, 0x74, 0x80, 0xbb, 0x38, 0xa7, 0x20,0xa4, 0x72, 0xf9, 0x02,
      0x3a, 0x74, 0x7b, 0xbf, 0x06, 0x43, 0xd1, 0xd8, 0x1f, 0xac, 0x95, 0x08, 0xf3, 0xd3, 0x41, 0x7f, 0xbb, 0x75, 0xc1, 0xdf, 0x84, 0x5c, 0x2d, 0x4d, 0x11, 0xef, 0x11, 0x64, 0x67, 0xa5, 0x54, 0x26, 0xaa, 0x1e, 0x7b, 0xc0, 0x3d,0xad, 0x3b, 0xb9, 0xfe,
      0x34, 0x9e, 0x4f, 0xac, 0x55, 0x9b, 0x33, 0x66, 0x0d, 0x9f, 0x66, 0xa5, 0x24, 0xa9, 0x22, 0xd1, 0x39, 0xac, 0xee, 0x79, 0x90, 0xdd, 0x13, 0x20, 0x47, 0x1f, 0x32, 0x12, 0xfd, 0xa0, 0x24, 0xab, 0x4d, 0x50, 0x69, 0x6c, 0xee,0x52, 0x86, 0xa5, 0x61,
      0x65, 0xd9, 0xb4, 0x58, 0xfb,
      0x79, 0x2a, 0x4f, 0xf1, 0xe2, 0x62, 0x21, 0x5b, 0x77, 0x3b, 0x86, 0x6f, 0x61, 0xaa, 0x27, 0x0b, 0xbd, 0x5e, 0x9d, 0x29, 0xe6, 0x04, 0x18, 0xd3, 0x0d, 0xe2, 0x42, 0x2c, 0xe6, 0xef, 0x5a, 0x62, 0xac, 0x1b, 0xa9, 0x4a, 0xcb,
      0x96, 0xef, 0x94, 0x51, 0xe3, 0xd3, 0xac, 0x79, 0x79, 0x20, 0x81, 0x39, 0x5f, 0x1e, 0x71, 0x43, 0x44, 0xba, 0xfa, 0x19, 0x4f, 0x03, 0x95, 0xc3, 0x74, 0xa7, 0xb9, 0x88, 0x84, 0x79, 0xfc, 0x1c, 0x8d, 0x48, 0x95, 0x77, 0x57,
      0xb1, 0x96, 0x69, 0xc4, 0x42, 0x04, 0xa9, 0x0d, 0x86, 0xf7, 0x55, 0xe2, 0x4d, 0xf9, 0x80, 0xb1, 0x8d, 0xd3, 0x9a, 0xdd, 0xf3, 0x5f, 0x83, 0xe0, 0x6a, 0x5f, 0xd5, 0x99, 0xb3, 0xbd, 0x86, 0xb5, 0xad, 0xd3, 0xa7, 0xe4, 0x1d,
      0x4f, 0x66, 0xe7, 0x59, 0x08, 0xe8, 0x31, 0x22, 0x52, 0x52, 0xbc, 0x6c, 0xe3, 0xee, 0x2f, 0xa7, 0xf1, 0x03, 0x39, 0x30, 0xa0, 0x46, 0x4f, 0xe6, 0xf3, 0xbd, 0x7f, 0x74, 0x2a, 0xf9, 0xad, 0x8d, 0xac, 0x1a, 0xcf, 0x00, 0x24,
      0x48, 0x1a, 0x5e, 0xdd, 0x0d, 0xda, 0x90, 0xbd, 0x31, 0x02, 0x71, 0xf0, 0xce, 0x3b, 0xa4, 0x51, 0xaa, 0x7c, 0x4d, 0xd1, 0x86, 0x0b, 0x66, 0x77, 0x30, 0x41, 0x8f, 0x29, 0x87, 0x52, 0x49, 0x5f, 0xf8, 0xfd, 0x1b, 0x8a, 0x74,
      0x30, 0xbc, 0x70, 0x28, 0x39, 0x8a, 0xd2, 0x4a, 0x60, 0xce, 0x87, 0x56, 0xd0, 0x1b, 0x21, 0x67, 0x42, 0x6e, 0x05, 0xbf, 0x6f, 0xbe, 0x0e, 0x20, 0xf0, 0x0b, 0xbc, 0x0f, 0x87, 0x70, 0x6b, 0x30, 0xb6, 0xcb, 0xf9, 0x55, 0x37,
      0xbc, 0x53, 0x08, 0xa3, 0xec, 0x18, 0x5a, 0x4f, 0x5e, 0x3b, 0xca, 0x9f, 0xc1, 0x7f, 0xd9, 0x7b, 0x73, 0x5d, 0xe6, 0xd6, 0xaa, 0xc6, 0x81, 0x81, 0xca, 0xe7, 0xe3, 0x36, 0x5b, 0xbf, 0x15, 0x30, 0x1e, 0x04, 0x05, 0xf3, 0xbe,
      0xf9, 0xf6, 0x84, 0x94, 0x12, 0x6f, 0x74, 0x44, 0xe8, 0xa6, 0x9e, 0x9e, 0xbd, 0xb6, 0x0b, 0x8e, 0xfa, 0x72, 0x22, 0x65, 0xda, 0x3d, 0xa9, 0x86, 0x16, 0xa4, 0xc2, 0xf5, 0xf4, 0x9b, 0xe0, 0x51, 0x46, 0xd6, 0xb1, 0x0a, 0xc0,
      0xab, 0x53, 0x2e, 0x4e, 0x36, 0x56, 0x7e, 0xe1, 0x80, 0x55, 0x7d, 0x1c, 0x8a, 0x79, 0xf8, 0x6d, 0xd0, 0x7a, 0x51, 0x0a, 0x23, 0xbc, 0x19, 0xab, 0xfb, 0x36, 0x55, 0xb8, 0xb1, 0xca, 0x48, 0x50, 0x9b, 0xdc, 0xb4, 0xb1, 0xc4,
      0xd6, 0x1d, 0xc4, 0x41, 0xf4, 0x74, 0x79, 0xfc, 0x32, 0x9c, 0xc4, 0x4d, 0x55, 0xae, 0xbe, 0x87, 0x66, 0x5d, 0x4e, 0xcd, 0x43, 0xf8, 0xc3, 0x67, 0x46, 0x3c, 0x02, 0x7a, 0x0c, 0xc9, 0x8a, 0x54, 0x7e, 0x2d, 0x25, 0xa0, 0xda,
      0xf6, 0xbc, 0x9f, 0x28, 0xe6, 0xa8, 0xd5, 0x15, 0xe3, 0xb0, 0xc1, 0x45, 0xfa, 0x61, 0xc5, 0x9e, 0xf9, 0xf2, 0x7e, 0xeb, 0xd3, 0x4b, 0x67, 0x4d, 0x34, 0x76, 0xbf, 0x26, 0x07, 0x27, 0x5c, 0x5b, 0xe6, 0xad, 0xd4, 0x56, 0x4d,
      0x55, 0x63, 0x9e, 0x3f, 0x13, 0xa3, 0xdf, 0x63, 0xeb, 0x2d, 0x89, 0xbc, 0x9e, 0x88, 0x08, 0x87, 0xee, 0x42, 0x44, 0xa1, 0x80, 0x0d, 0x4b, 0xf0, 0x6d, 0x49, 0x7d, 0xdb, 0xe5, 0xda, 0x4f, 0xd1, 0x1b, 0x08, 0xae, 0x62, 0x28,
      0xae, 0xea, 0xb0, 0xea, 0xa0, 0x9b, 0x68, 0x85, 0xe1, 0x0f, 0x79, 0xfb, 0x50, 0xb8, 0xa9, 0xc7, 0x77, 0xf1, 0xc0, 0xfd, 0x10, 0xaa, 0xfa, 0x69, 0x3e, 0x7f, 0x9b, 0x99, 0x89, 0x29, 0x0d, 0x73, 0x1a, 0x30, 0x38, 0x96, 0xa0,
      0xd4, 0xe8, 0x23, 0x06, 0xcf, 0x69, 0x4c, 0x23, 0x21, 0xa5, 0x8f, 0x10, 0x8c, 0x12, 0xa1, 0xc7, 0x40, 0xdb, 0x47, 0x77, 0xeb, 0xab, 0x0a, 0x60, 0xf1, 0x38, 0x6b, 0x62, 0xa8, 0xe8, 0x77, 0x17, 0xc1, 0x43, 0x40, 0x9d, 0x89,
      0xaf, 0xba, 0x80, 0x22, 0x0e, 0x14, 0xf4, 0x0f, 0xed, 0xd6, 0x13, 0xa9, 0x63, 0x9d, 0x6f, 0xc9, 0xed, 0x51, 0x88, 0xfe, 0x71, 0xe8, 0xc3, 0xbe, 0x43, 0xa2, 0xe2, 0x85, 0x42, 0xd3, 0xae, 0xad, 0xa8, 0xb4, 0xa0, 0x55, 0x0e,
      0x54, 0xc6, 0xd0, 0xc8, 0x04, 0xea, 0x67, 0x5c, 0x8b, 0xb6, 0x24, 0x6a, 0x36, 0xab, 0x67, 0x67, 0x80, 0x00, 0xe2, 0x40, 0x67, 0x10, 0xe5, 0x4e, 0xf1, 0x82, 0x27, 0x2d, 0xc3, 0x07, 0x06, 0x7d, 0xe6, 0xcf, 0x1a, 0x2c, 0xa5,
      0x03, 0x07, 0x56, 0xae, 0xf3, 0x75, 0xbd, 0x65, 0xfa, 0x3c, 0x38, 0xf9, 0x3a, 0xe2, 0x2e, 0xa7, 0xd6, 0x4a, 0xf6, 0xfb, 0x15, 0x27, 0x02, 0x50, 0x4e, 0xfa, 0x78, 0xa9, 0xd1, 0xfb, 0x0a, 0x0f, 0xd3, 0xab, 0x73, 0x58, 0x2e,
      0xea, 0x47, 0x04, 0x84, 0x61, 0xa9, 0x5f, 0xb9, 0x6b, 0xc8, 0x04, 0xfa, 0x44, 0xf9, 0xb1, 0x6e, 0x5f, 0x20, 0x9d, 0xde, 0xcc, 0x4d, 0xce, 0x7a, 0xae, 0x01, 0x69, 0x11, 0x5f, 0xbd, 0xef, 0x31, 0x59, 0x6f, 0xe3, 0x01, 0x76,
      0x17, 0xab, 0x2a, 0xc7, 0xdf, 0x92, 0x2a, 0x35, 0x09, 0x40, 0xb1, 0x69, 0x43, 0xd3, 0x79, 0xa5, 0x09, 0x7d, 0x55, 0xbe, 0x4b, 0x45, 0xa1, 0xe7, 0xeb, 0x13, 0x37, 0x55, 0xd5, 0x0f, 0xd2, 0x75, 0x99, 0x6e, 0x21, 0x1d, 0xbb,
      0xf1, 0x37, 0xd2, 0xd9, 0x0c, 0x36, 0x33, 0xfc, 0x5d, 0xfe, 0x23, 0xd3, 0x71, 0xb9, 0x40, 0x6f, 0xe9, 0x44, 0xd5, 0xa7, 0xb0, 0x05, 0xf8, 0x4a, 0xbc, 0xf6, 0x2d, 0x27, 0x3d, 0x55, 0x40, 0x9c, 0x04, 0xe9, 0x12, 0xe5, 0x55,
      0xd0, 0x3d, 0x2d, 0xd8, 0xcb, 0xe7, 0x87, 0x5f, 0x56, 0xde, 0xce, 0xac, 0x28, 0xd3, 0x0a, 0x49, 0x4d, 0xbc, 0x89, 0x58, 0xd1, 0x67, 0x0a, 0x7d, 0x33, 0x8d, 0x4c, 0x62, 0x3e, 0xef, 0x24, 0x99, 0x58, 0x7b, 0x9b, 0xea, 0x9f,
      0xdd, 0xf9, 0x8f, 0xff, 0x97, 0xab, 0x9e, 0x08, 0x88, 0xd7, 0xe2, 0x51, 0x35, 0xe5, 0xf9, 0x62, 0x61, 0xf4, 0xa7, 0xc4, 0xf4, 0x97, 0xc2, 0x29, 0x6a, 0x32, 0x52, 0xad, 0x45, 0x7e, 0x46, 0x8e, 0x8b, 0xea, 0xe0, 0x07, 0x95,
      0x42, 0xce, 0xc8, 0x97, 0x64, 0x6f, 0x0d, 0x8d, 0xbd, 0xd7, 0x04, 0xfc, 0x30, 0x62, 0xec, 0xbf, 0x99, 0xa9, 0xb9, 0x91, 0x5d, 0xa0, 0x23, 0x8f, 0xe0, 0xb0, 0x83, 0x10, 0x2a, 0x4a, 0x2e, 0xdb, 0xe6, 0xbd, 0xa0, 0x9a, 0xed,
      0x30, 0xff, 0x66, 0xf6, 0xe9, 0x5d, 0xa7, 0x2b, 0x50, 0x27, 0x35, 0x49, 0x66, 0x1a, 0x4b, 0x04, 0x61, 0x25, 0x02, 0x3b, 0xb9, 0x9c, 0xec, 0x69, 0x23, 0xf7, 0xcb, 0x9d, 0x4c, 0x44, 0xf4, 0x29, 0x66, 0x7c, 0xc7, 0x9e, 0xf5,
      0x8e, 0x47, 0x47, 0x91, 0x99, 0x12, 0x96, 0x2d,
  };

  static constexpr const char expected[] =
    "792a4ff1e262215b773b866f61aa270bbd5e9d29e60418d30de2422ce6ef5a62d0e5947bdebaafddd6f87aced56aea661e2c2aeb8ad49b997e064b0674017eee8dfd4284cc4ddba1f6e5dad28543a871306690fd1abdc930e9dc0c42ba8bbe230979c2091fbda9a0accd03468c5d3bc26b7d800a8529240c03c926b926ce24423a59da001b30c2ab94e003abcd359563b2b2c4ad8c19bca57a8bbe2b8656a59d2dc59e70a8194e8346b8d07acd88ce487be945d387d83d936a3674bb7d86b8dd42d1c8b3b967bc984ab62459843006a074bb403341416381c120b6cc028d64a6c54d754cbdc0b5dcea389aa143c321c87897d58ec2ebdb02a16ec4d380570bcad817b74363dc192ac66e7b0937caa3a4a1acb93dd871d72c00b18958c7a5c21d2a569692e8d2ce820a1092759c9ba6272a9e3c56c05a5aebe77a549ee6cc62e39446c7e8b2cae84133521ce396d22e8826aa88eb0826dc2a01ab002ada81448eec6924da8ac74b496dd8874581a4b8d904c2db365e8bd8298de91a9b13541788892a1079e3592c30aa0a6a58e0bde75ca57b442d59bc92b335971653e469da80da9a0b61e03c92b269d20753059d54984a386cb5e08aea6bb98374186c7b3cb72d6cb02e61b36b317507240b7d618e289e5ae4e831c71e9dd71669c7ebac8148e8047a90b0358608690566604cb94de10a77c22a6958693bde7650baad4811b04e7672be101bb58bd991b97e7127520d9d111b708b0bbb13c88839e6066d85b5bbd8a248493bde3ca12262e9d0eda4c542165e1884045700e7d3b23c25c7be25049de1bd25442a1691d5c9b8c092124be1c8c04e6227c81ea940dcb7de33d0ab8b8e47b7a2b72c0d0246180e840866164a9594449be88eb7376331152d44963083a792e83830e94551e0bdd1baca73c2d5a8722e86033002123409d7d7ec846042e76ca438324ed1a51ecdabd5316005326970683e1b2893c3d05b23709d270689d617b4605dadeb6a5dd5bbb699a0d60ae0e19e0dbe385a257c04334ec078a0e8ad50382bd85e3cee1a0ca7d469cce284824cc9d7651fa53e691cf9979458b4d9d54a56b5fbc006f19d83a3b612e49b5e7e88912c5bdd7ed0dcecf77e48ff5cbfa54ed5355e54aacd9149316368c35238c5d87a818da2bae83b27c2e93a75f43624d69f230938ae0723cc4ea378ca1d1912cca4c9140c48a200df37acef6a7163c23cd213335aea6850ba790cd3e3034b5606c960f95aa3445be00ee355e021dfe15128e7f3bcbd6ae728a6d2fcab5772f6253de10cbc0b8c4546f2511a2618bbdc93663340a587197a3936da9b5af466ff87a65d74bdd42400238cfe946b1e14b8942f231206dcacd1aa2bb721be62dc1325fbb7fcb544b8e942d7f865495b6f34fb111b6f1b0b9a41366e3fc4f5378432fb0cf45fbe5b77e988d63ca8ee1ed6640058515035d6e9a7476dae793587faac24a0bf75716f6dd80427fdeff28d864b1dd51f5242bb0338249bd427cae3439523b11cbea9ac2dfcffd8ecdeb32aabbb70d870dc1b13a02585a4dd2db41fe559a0dd8cae272021da4b8c1f8b167a0de18de329c2fc5d5118e473c5f03c1599c9959e5b8358b575d2981bca08f61a3c4685dce6777344085a2887e85c7b404e980a16971e51f20493faa851a466115c7febafe503703e581a1ca14289d2fd449976113d30b50b7c6476a65f5eb48c25e9397b70818002c3596ba417e9a3297033a2fd55c05b07fe08f5aa878c3584e94d7baa54b00916f7c5afd5034d89e74509d11cc642b8ced156e5eca8fbe050ef0ac045d7c25f32f5da524c848254906fd19fc65d93816087957e352ee5820898b69973c95f4c1abe4f2ef2a70abfdb1508f4509b2b986fbf9107dbf40c8b6d95a422a95df01b1212af4c73ee2d0164b48735f81db3ad7393cf96751346247b75a13f4912544138a3a595c0cb4abf9c4b552ad34c4e990be311cc093c7d94eac592ff57b5980e89a4428e837eb887442c64be783f40ec39e84646acc66d8249e32a2b5962458063d0efef9e11d899e45eac869191a7f69b72a0f2ddf45b7efeeaa477e85162056810902540b3b8c3e4c104bd0867c38d24e75af139c40c870ac29d5ef9fe49be747ec4e40738e86b3f6f995dea5fe51d45d0da4a87df6e9577b66d4804a7d48eaf94bfaabf4edf303dec7f5927b206903663825605b1737c5f0a950e6ba0de81a1ed9ec8170590b8b26c81221c8b1adedbc91e77fca5a04b49fcc496c95071325e2bf91a1049643e58779f726dd6f23f5e7421d043471b7dee9fa08502758efe1e9179241ba481d9c25a6193513fc02d5c2dfe126c8bfd511c85866c7e22c1c225474bb44772d0d2dfe529da086978d2bb2a97597c1f787521a22d89892a453277d092e35819aa68ce30af71a27b7801c65d005f2572c208256c8a7054f8bbf7df5bb37670584441284a395038771b9fc8d7bf86022e24021ea8c6d02562522d71ff8bd330d2bd5be7101318cd1bb665d8387fbf53239f3b9832c20ae865ed0d213ba09379627aaba606632c488ccba7e766eb040bbb2697d91b6e32b23c1c7f3a396dabe4b2ae2e8b916ca5bc51c6da01311a983fc5710a58de0791b3b304d90c80cd4aafd5f0b452e7c914c213a09364651a1edeefdd5d7793bf555ceaf364f09b881f0a5c8bad89184192fd7a69052315f949bf4db9323943122f70d4d716d00691d59b40fe4576c9f9c3204434344c2fe20e90a092990b1ba8c6b06b3d11d24e828fe2e8b8edf3ae167eee21fcdfab605e5bc6de67a31b3992ad9acaacddcf897bfa0bf53c197480bb38a720a472f9023a747bbf0643d1d81fac9508f3d3417fbb75c1df845c2d4d11ef116467a55426aa1e7bc03dad3bb9fe349e4fac559b33660d9f66a524a922d139acee7990dd1320471f3212fda024ab4d50696cee5286a56165d9b458fb"
    "792a4ff1e262215b773b866f61aa270bbd5e9d29e60418d30de2422ce6ef5a62ac1ba94acb96ef9451e3d3ac79792081395f1e714344bafa194f0395c374a7b9888479fc1c8d48957757b19669c44204a90d86f755e24df980b18dd39addf35f83e06a5fd599b3bd86b5add3a7e41d4f66e75908e831225252bc6ce3ee2fa7f1033930a0464fe6f3bd7f742af9ad8dac1acf0024481a5edd0dda90bd310271f0ce3ba451aa7c4dd1860b667730418f298752495ff8fd1b8a7430bc7028398ad24a60ce8756d01b2167426e05bf6fbe0e20f00bbc0f87706b30b6cbf95537bc5308a3ec185a4f5e3bca9fc17fd97b735de6d6aac68181cae7e3365bbf15301e0405f3bef9f68494126f7444e8a69e9ebdb60b8efa722265da3da98616a4c2f5f49be05146d6b10ac0ab532e4e36567ee180557d1c8a79f86dd07a510a23bc19abfb3655b8b1ca48509bdcb4b1c4d61dc441f47479fc329cc44d55aebe87665d4ecd43f8c367463c027a0cc98a547e2d25a0daf6bc9f28e6a8d515e3b0c145fa61c59ef9f27eebd34b674d3476bf2607275c5be6add4564d55639e3f13a3df63eb2d89bc9e880887ee4244a1800d4bf06d497ddbe5da4fd11b08ae6228aeeab0eaa09b6885e10f79fb50b8a9c777f1c0fd10aafa693e7f9b9989290d731a303896a0d4e82306cf694c2321a58f108c12a1c740db4777ebab0a60f1386b62a8e87717c143409d89afba80220e14f40fedd613a9639d6fc9ed5188fe71e8c3be43a2e28542d3aeada8b4a0550e54c6d0c804ea675c8bb6246a36ab67678000e2406710e54ef182272dc307067de6cf1a2ca5030756aef375bd65fa3c38f93ae22ea7d64af6fb152702504efa78a9d1fb0a0fd3ab73582eea47048461a95fb96bc804fa44f9b16e5f209ddecc4dce7aae0169115fbdef31596fe3017617ab2ac7df922a350940b16943d379a5097d55be4b45a1e7eb133755d50fd275996e211dbbf137d2d90c3633fc5dfe23d371b9406fe944d5a7b005f84abcf62d273d55409c04e912e555d03d2dd8cbe7875f56deceac28d30a494dbc8958d1670a7d338d4c623eef2499587b9bea9fddf98fff97ab9e0888d7e25135e5f96261f4a7c4f497c2296a3252ad457e468e8beae0079542cec897646f0d8dbdd704fc3062ecbf99a9b9915da0238fe0b083102a4a2edbe6bda09aed30ff66f6e95da72b50273549661a4b046125023bb99cec6923f7cb9d4c44f429667cc79ef58e4747919912962d";

  template<typename T>
  bool is_formatted()
  {
    T value{};

    //static_assert(alignof(T) == 1, "T must have 1 byte alignment");
    //static_assert(sizeof(T) <= sizeof(source), "T is too large for source");
    //static_assert(sizeof(T) * 2 <= sizeof(expected), "T is too large for destination");

    std::memcpy(std::addressof(value), source, sizeof(T));

    std::stringstream out;
    out << "BEGIN" << value << "END";  
    return out.str() == "BEGIN<" + std::string{expected, sizeof(T) * 2} + ">END";
  }
}

TEST(Crypto, Ostream)
{
  EXPECT_TRUE(is_formatted<crypto::hash8>());
  EXPECT_TRUE(is_formatted<crypto::hash>());
  EXPECT_TRUE(is_formatted<crypto::public_key>());
  EXPECT_TRUE(is_formatted<crypto::secret_key>());
  EXPECT_TRUE(is_formatted<crypto::signature>());
  EXPECT_TRUE(is_formatted<crypto::key_derivation>());
  EXPECT_TRUE(is_formatted<crypto::key_image>());
}

TEST(Crypto, null_keys)
{
  char zero[32];
  memset(zero, 0, 32);
  ASSERT_EQ(memcmp(crypto::null_skey.data, zero, 32), 0);
  ASSERT_EQ(memcmp(crypto::null_pkey.data, zero, 32), 0);
}

TEST(Crypto, verify_32)
{
  // all bytes are treated the same, so we can brute force just one byte
  unsigned char k0[32] = {0}, k1[32] = {0};
  for (unsigned int i0 = 0; i0 < 256; ++i0)
  {
    k0[0] = i0;
    for (unsigned int i1 = 0; i1 < 256; ++i1)
    {
      k1[0] = i1;
      ASSERT_EQ(!crypto_verify_32(k0, k1), i0 == i1);
    }
  }
}
